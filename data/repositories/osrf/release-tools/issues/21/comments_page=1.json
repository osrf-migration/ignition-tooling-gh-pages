{"pagelen": 100, "values": [{"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21/comments/7371034.json"}, "html": {"href": "#!/osrf/release-tools/issues/21#comment-7371034"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21.json"}}, "type": "issue", "id": 21, "repository": {"links": {"self": {"href": "data/repositories/osrf/release-tools.json"}, "html": {"href": "#!/osrf/release-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{41811d3d-19d0-428e-a134-976595e72508}ts=python"}}, "type": "repository", "name": "release-tools", "full_name": "osrf/release-tools", "uuid": "{41811d3d-19d0-428e-a134-976595e72508}"}, "title": "Enable gazebo-simbody and gazebo-dart jobs"}, "content": {"raw": "I would say that for Simbody we are currently doing this.\r\n\r\nThere is an [upstream repository checker job](http://build.osrfoundation.org/view/upstream-simbody/job/simbody-upstream-checker) which check once a day the changes in simbody repo. If something changed, it will trigger our default [gazebo on nvidia](http://build.osrfoundation.org/job/gazebo-default-devel-quantal-amd64-gpu-nvidia/) job which is already using simbody for all builds.\r\n\r\nI will configure the same, with a special dart job, for DART.", "markup": "markdown", "html": "<p>I would say that for Simbody we are currently doing this.</p>\n<p>There is an <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/upstream-simbody/job/simbody-upstream-checker\" rel=\"nofollow\">upstream repository checker job</a> which check once a day the changes in simbody repo. If something changed, it will trigger our default <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/job/gazebo-default-devel-quantal-amd64-gpu-nvidia/\" rel=\"nofollow\">gazebo on nvidia</a> job which is already using simbody for all builds.</p>\n<p>I will configure the same, with a special dart job, for DART.</p>", "type": "rendered"}, "created_on": "2013-12-16T13:02:04.502628+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 7371034}, {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21/comments/7375631.json"}, "html": {"href": "#!/osrf/release-tools/issues/21#comment-7375631"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21.json"}}, "type": "issue", "id": 21, "repository": {"links": {"self": {"href": "data/repositories/osrf/release-tools.json"}, "html": {"href": "#!/osrf/release-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{41811d3d-19d0-428e-a134-976595e72508}ts=python"}}, "type": "repository", "name": "release-tools", "full_name": "osrf/release-tools", "uuid": "{41811d3d-19d0-428e-a134-976595e72508}"}, "title": "Enable gazebo-simbody and gazebo-dart jobs"}, "content": {"raw": "The upstream checker is good but it's triggering a job that uses a simbody deb, not simbody from source. The [gazebo-simbody job](http://build.osrfoundation.org/view/gazebo/job/gazebo-simbody-simbody_pkg-precise-amd64/) is currently disabled.", "markup": "markdown", "html": "<p>The upstream checker is good but it's triggering a job that uses a simbody deb, not simbody from source. The <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/gazebo/job/gazebo-simbody-simbody_pkg-precise-amd64/\" rel=\"nofollow\">gazebo-simbody job</a> is currently disabled.</p>", "type": "rendered"}, "created_on": "2013-12-16T17:45:25.268174+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7375631}, {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21/comments/7375638.json"}, "html": {"href": "#!/osrf/release-tools/issues/21#comment-7375638"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21.json"}}, "type": "issue", "id": 21, "repository": {"links": {"self": {"href": "data/repositories/osrf/release-tools.json"}, "html": {"href": "#!/osrf/release-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{41811d3d-19d0-428e-a134-976595e72508}ts=python"}}, "type": "repository", "name": "release-tools", "full_name": "osrf/release-tools", "uuid": "{41811d3d-19d0-428e-a134-976595e72508}"}, "title": "Enable gazebo-simbody and gazebo-dart jobs"}, "content": {"raw": "It should be [done](http://build.osrfoundation.org/view/upstream-dart/). Maybe we can run only the tests related to the dart/simbody using a regexp.", "markup": "markdown", "html": "<p>It should be <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/upstream-dart/\" rel=\"nofollow\">done</a>. Maybe we can run only the tests related to the dart/simbody using a regexp.</p>", "type": "rendered"}, "created_on": "2013-12-16T17:46:07.356501+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 7375638}, {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21/comments/7375710.json"}, "html": {"href": "#!/osrf/release-tools/issues/21#comment-7375710"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21.json"}}, "type": "issue", "id": 21, "repository": {"links": {"self": {"href": "data/repositories/osrf/release-tools.json"}, "html": {"href": "#!/osrf/release-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{41811d3d-19d0-428e-a134-976595e72508}ts=python"}}, "type": "repository", "name": "release-tools", "full_name": "osrf/release-tools", "uuid": "{41811d3d-19d0-428e-a134-976595e72508}"}, "title": "Enable gazebo-simbody and gazebo-dart jobs"}, "content": {"raw": "Cool, that dart job is nice. Currently DART support is in a pull request (gazebo_dart_2.1 branch), so it won't run the tests yet.\n\nRegarding the regexp, except for UNIT_Joint_TEST, all the physics engine tests have a suffix of \"/0\" for ODE, \"/1\" for bullet, \"/2\" for simbody, and \"/3\" for dart. Some of the SpawnJoint tests in UNIT_Joint_TEST are \"/0 - /5\" for ODE, \"/6 - /11\" for bullet, \"/12 - /17\" for simbody, and so on. Maybe for UNIT_Joint_TEST, just run them all because the list is complicated.\n\nEDIT:\nactually you can see which physics engines are in use with the `--gtest_list_tests` option and then grep / sed for the names:\n~~~\n$ gazebo/physics/UNIT_Joint_TEST --gtest_list_tests\nJoint_TEST.\n  ForceTorque1ODE\n  ForceTorque1Simbody\n  ForceTorque1Bullet\n  ForceTorque2ODE\n  ForceTorque2Simbody\n  ForceTorque2Bullet\n  GetForceTorqueWithAppliedForceODE\n  GetForceTorqueWithAppliedForceSimbody\n  GetForceTorqueWithAppliedForceBullet\n  joint_SDF14\nTestRuns/Joint_TEST_All.\n  SpawnJointTypes/0  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d65b5 pointing to \"revolute\")\n  SpawnJointTypes/1  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d66ad pointing to \"prismatic\")\n  SpawnJointTypes/2  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d66b7 pointing to \"screw\")\n  SpawnJointTypes/3  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d66bd pointing to \"universal\")\n  SpawnJointTypes/4  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d66a8 pointing to \"ball\")\n  SpawnJointTypes/5  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d66c7 pointing to \"revolute2\")\n  SpawnJointTypes/6  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d65b5 pointing to \"revolute\")\n  SpawnJointTypes/7  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d66ad pointing to \"prismatic\")\n  SpawnJointTypes/8  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d66b7 pointing to \"screw\")\n  SpawnJointTypes/9  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d66bd pointing to \"universal\")\n  SpawnJointTypes/10  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d66a8 pointing to \"ball\")\n  SpawnJointTypes/11  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d66c7 pointing to \"revolute2\")\n  SpawnJointTypes/12  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d65b5 pointing to \"revolute\")\n  SpawnJointTypes/13  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d66ad pointing to \"prismatic\")\n  SpawnJointTypes/14  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d66b7 pointing to \"screw\")\n  SpawnJointTypes/15  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d66bd pointing to \"universal\")\n  SpawnJointTypes/16  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d66a8 pointing to \"ball\")\n  SpawnJointTypes/17  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d66c7 pointing to \"revolute2\")\nTestRuns/Joint_TEST_Rotational.\n  SpawnJointRotational/0  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d65b5 pointing to \"revolute\")\n  SpawnJointRotational/1  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d66bd pointing to \"universal\")\n  SpawnJointRotational/2  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d66a8 pointing to \"ball\")\n  SpawnJointRotational/3  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d65b5 pointing to \"revolute\")\n  SpawnJointRotational/4  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d66bd pointing to \"universal\")\n  SpawnJointRotational/5  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d66a8 pointing to \"ball\")\n  SpawnJointRotational/6  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d65b5 pointing to \"revolute\")\n  SpawnJointRotational/7  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d66bd pointing to \"universal\")\n  SpawnJointRotational/8  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d66a8 pointing to \"ball\")\nTestRuns/Joint_TEST_RotationalWorld.\n  SpawnJointRotationalWorld/0  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d65b5 pointing to \"revolute\")\n  SpawnJointRotationalWorld/1  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4d66a8 pointing to \"ball\")\n  SpawnJointRotationalWorld/2  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d65b5 pointing to \"revolute\")\n  SpawnJointRotationalWorld/3  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4d66a8 pointing to \"ball\")\n  SpawnJointRotationalWorld/4  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d65b5 pointing to \"revolute\")\n  SpawnJointRotationalWorld/5  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4d66a8 pointing to \"ball\")\nPhysicsEngines/Joint_TEST.\n  JointTorqueTest/0  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4da98a pointing to \"\")\n  JointTorqueTest/1  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4da98a pointing to \"\")\n  JointTorqueTest/2  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4da98a pointing to \"\")\n  JointCreationDestructionTest/0  # GetParam() = (0x4d66a4 pointing to \"ode\", 0x4da98a pointing to \"\")\n  JointCreationDestructionTest/1  # GetParam() = (0x4d65a0 pointing to \"bullet\", 0x4da98a pointing to \"\")\n  JointCreationDestructionTest/2  # GetParam() = (0x4d65ad pointing to \"simbody\", 0x4da98a pointing to \"\")\n\n~~~", "markup": "markdown", "html": "<p>Cool, that dart job is nice. Currently DART support is in a pull request (gazebo_dart_2.1 branch), so it won't run the tests yet.</p>\n<p>Regarding the regexp, except for UNIT_Joint_TEST, all the physics engine tests have a suffix of \"/0\" for ODE, \"/1\" for bullet, \"/2\" for simbody, and \"/3\" for dart. Some of the SpawnJoint tests in UNIT_Joint_TEST are \"/0 - /5\" for ODE, \"/6 - /11\" for bullet, \"/12 - /17\" for simbody, and so on. Maybe for UNIT_Joint_TEST, just run them all because the list is complicated.</p>\n<p>EDIT:\nactually you can see which physics engines are in use with the <code>--gtest_list_tests</code> option and then grep / sed for the names:</p>\n<div class=\"codehilite\"><pre><span></span>$ gazebo/physics/UNIT_Joint_TEST --gtest_list_tests\nJoint_TEST.\n  ForceTorque1ODE\n  ForceTorque1Simbody\n  ForceTorque1Bullet\n  ForceTorque2ODE\n  ForceTorque2Simbody\n  ForceTorque2Bullet\n  GetForceTorqueWithAppliedForceODE\n  GetForceTorqueWithAppliedForceSimbody\n  GetForceTorqueWithAppliedForceBullet\n  joint_SDF14\nTestRuns/Joint_TEST_All.\n  SpawnJointTypes/0  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d65b5 pointing to &quot;revolute&quot;)</span>\n  SpawnJointTypes/1  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d66ad pointing to &quot;prismatic&quot;)</span>\n  SpawnJointTypes/2  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d66b7 pointing to &quot;screw&quot;)</span>\n  SpawnJointTypes/3  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d66bd pointing to &quot;universal&quot;)</span>\n  SpawnJointTypes/4  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d66a8 pointing to &quot;ball&quot;)</span>\n  SpawnJointTypes/5  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d66c7 pointing to &quot;revolute2&quot;)</span>\n  SpawnJointTypes/6  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d65b5 pointing to &quot;revolute&quot;)</span>\n  SpawnJointTypes/7  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d66ad pointing to &quot;prismatic&quot;)</span>\n  SpawnJointTypes/8  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d66b7 pointing to &quot;screw&quot;)</span>\n  SpawnJointTypes/9  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d66bd pointing to &quot;universal&quot;)</span>\n  SpawnJointTypes/10  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d66a8 pointing to &quot;ball&quot;)</span>\n  SpawnJointTypes/11  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d66c7 pointing to &quot;revolute2&quot;)</span>\n  SpawnJointTypes/12  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d65b5 pointing to &quot;revolute&quot;)</span>\n  SpawnJointTypes/13  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d66ad pointing to &quot;prismatic&quot;)</span>\n  SpawnJointTypes/14  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d66b7 pointing to &quot;screw&quot;)</span>\n  SpawnJointTypes/15  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d66bd pointing to &quot;universal&quot;)</span>\n  SpawnJointTypes/16  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d66a8 pointing to &quot;ball&quot;)</span>\n  SpawnJointTypes/17  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d66c7 pointing to &quot;revolute2&quot;)</span>\nTestRuns/Joint_TEST_Rotational.\n  SpawnJointRotational/0  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d65b5 pointing to &quot;revolute&quot;)</span>\n  SpawnJointRotational/1  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d66bd pointing to &quot;universal&quot;)</span>\n  SpawnJointRotational/2  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d66a8 pointing to &quot;ball&quot;)</span>\n  SpawnJointRotational/3  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d65b5 pointing to &quot;revolute&quot;)</span>\n  SpawnJointRotational/4  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d66bd pointing to &quot;universal&quot;)</span>\n  SpawnJointRotational/5  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d66a8 pointing to &quot;ball&quot;)</span>\n  SpawnJointRotational/6  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d65b5 pointing to &quot;revolute&quot;)</span>\n  SpawnJointRotational/7  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d66bd pointing to &quot;universal&quot;)</span>\n  SpawnJointRotational/8  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d66a8 pointing to &quot;ball&quot;)</span>\nTestRuns/Joint_TEST_RotationalWorld.\n  SpawnJointRotationalWorld/0  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d65b5 pointing to &quot;revolute&quot;)</span>\n  SpawnJointRotationalWorld/1  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4d66a8 pointing to &quot;ball&quot;)</span>\n  SpawnJointRotationalWorld/2  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d65b5 pointing to &quot;revolute&quot;)</span>\n  SpawnJointRotationalWorld/3  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4d66a8 pointing to &quot;ball&quot;)</span>\n  SpawnJointRotationalWorld/4  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d65b5 pointing to &quot;revolute&quot;)</span>\n  SpawnJointRotationalWorld/5  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4d66a8 pointing to &quot;ball&quot;)</span>\nPhysicsEngines/Joint_TEST.\n  JointTorqueTest/0  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4da98a pointing to &quot;&quot;)</span>\n  JointTorqueTest/1  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4da98a pointing to &quot;&quot;)</span>\n  JointTorqueTest/2  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4da98a pointing to &quot;&quot;)</span>\n  JointCreationDestructionTest/0  <span class=\"c1\"># GetParam() = (0x4d66a4 pointing to &quot;ode&quot;, 0x4da98a pointing to &quot;&quot;)</span>\n  JointCreationDestructionTest/1  <span class=\"c1\"># GetParam() = (0x4d65a0 pointing to &quot;bullet&quot;, 0x4da98a pointing to &quot;&quot;)</span>\n  JointCreationDestructionTest/2  <span class=\"c1\"># GetParam() = (0x4d65ad pointing to &quot;simbody&quot;, 0x4da98a pointing to &quot;&quot;)</span>\n</pre></div>", "type": "rendered"}, "created_on": "2013-12-16T17:52:31.978568+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": "2013-12-16T22:34:37.128941+00:00", "type": "issue_comment", "id": 7375710}, {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21/comments/7394823.json"}, "html": {"href": "#!/osrf/release-tools/issues/21#comment-7394823"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21.json"}}, "type": "issue", "id": 21, "repository": {"links": {"self": {"href": "data/repositories/osrf/release-tools.json"}, "html": {"href": "#!/osrf/release-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{41811d3d-19d0-428e-a134-976595e72508}ts=python"}}, "type": "repository", "name": "release-tools", "full_name": "osrf/release-tools", "uuid": "{41811d3d-19d0-428e-a134-976595e72508}"}, "title": "Enable gazebo-simbody and gazebo-dart jobs"}, "content": {"raw": "About the dart job, you are right. I've split the [dart jobs](http://build.osrfoundation.org/view/upstream-dart/): one for ppa packages, one for compiling from source. The checker of upstream repository is now using the from source version.\n\nFor using only the tests affecting dart without modifying our cmake code, we could use:\n\n* Get the list of tests affecting dart in Joint_TEST (using dart branch): \n\n```gazebo/physics/UNIT_Joint_TEST --gtest_list_tests | grep dart | awk '{ print $1 }'```\n\nThis seems not to work for precise (at least). The output of gtest_lists in much less accurate.\n\n* Use gtest_filter with the output of previous command:\n\n```\ngazebo/physics/UNIT_Joint_TEST --gtest_filter=*SpawnJointTypes/18*:*SpawnJointRotationalWorld/6*\n```\n\nThe only problem I currently face is how to use gtest_filter from our ctest wrapper.", "markup": "markdown", "html": "<p>About the dart job, you are right. I've split the <a data-is-external-link=\"true\" href=\"http://build.osrfoundation.org/view/upstream-dart/\" rel=\"nofollow\">dart jobs</a>: one for ppa packages, one for compiling from source. The checker of upstream repository is now using the from source version.</p>\n<p>For using only the tests affecting dart without modifying our cmake code, we could use:</p>\n<ul>\n<li>Get the list of tests affecting dart in Joint_TEST (using dart branch): </li>\n</ul>\n<p><code>gazebo/physics/UNIT_Joint_TEST --gtest_list_tests | grep dart | awk '{ print $1 }'</code></p>\n<p>This seems not to work for precise (at least). The output of gtest_lists in much less accurate.</p>\n<ul>\n<li>Use gtest_filter with the output of previous command:</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>gazebo/physics/UNIT_Joint_TEST --gtest_filter=*SpawnJointTypes/18*:*SpawnJointRotationalWorld/6*\n</pre></div>\n\n\n<p>The only problem I currently face is how to use gtest_filter from our ctest wrapper.</p>", "type": "rendered"}, "created_on": "2013-12-17T21:11:03.510604+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 7394823}, {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21/comments/7396580.json"}, "html": {"href": "#!/osrf/release-tools/issues/21#comment-7396580"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21.json"}}, "type": "issue", "id": 21, "repository": {"links": {"self": {"href": "data/repositories/osrf/release-tools.json"}, "html": {"href": "#!/osrf/release-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{41811d3d-19d0-428e-a134-976595e72508}ts=python"}}, "type": "repository", "name": "release-tools", "full_name": "osrf/release-tools", "uuid": "{41811d3d-19d0-428e-a134-976595e72508}"}, "title": "Enable gazebo-simbody and gazebo-dart jobs"}, "content": {"raw": "For an extra ball, what about running some of our integration tests with the different physics engines? Does this make sense? Which will be affected?", "markup": "markdown", "html": "<p>For an extra ball, what about running some of our integration tests with the different physics engines? Does this make sense? Which will be affected?</p>", "type": "rendered"}, "created_on": "2013-12-17T23:46:55.349497+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 7396580}, {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21/comments/7396795.json"}, "html": {"href": "#!/osrf/release-tools/issues/21#comment-7396795"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21.json"}}, "type": "issue", "id": 21, "repository": {"links": {"self": {"href": "data/repositories/osrf/release-tools.json"}, "html": {"href": "#!/osrf/release-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{41811d3d-19d0-428e-a134-976595e72508}ts=python"}}, "type": "repository", "name": "release-tools", "full_name": "osrf/release-tools", "uuid": "{41811d3d-19d0-428e-a134-976595e72508}"}, "title": "Enable gazebo-simbody and gazebo-dart jobs"}, "content": {"raw": "I'm not sure what you mean exactly. For any physics tests that support multiple physics engines, we currently run them all if a physics engine is found during cmake configuration. I like having them all run. Are you looking for ways to speed up the Jenkins build?", "markup": "markdown", "html": "<p>I'm not sure what you mean exactly. For any physics tests that support multiple physics engines, we currently run them all if a physics engine is found during cmake configuration. I like having them all run. Are you looking for ways to speed up the Jenkins build?</p>", "type": "rendered"}, "created_on": "2013-12-18T00:23:11.270922+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7396795}, {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21/comments/7402783.json"}, "html": {"href": "#!/osrf/release-tools/issues/21#comment-7402783"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21.json"}}, "type": "issue", "id": 21, "repository": {"links": {"self": {"href": "data/repositories/osrf/release-tools.json"}, "html": {"href": "#!/osrf/release-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{41811d3d-19d0-428e-a134-976595e72508}ts=python"}}, "type": "repository", "name": "release-tools", "full_name": "osrf/release-tools", "uuid": "{41811d3d-19d0-428e-a134-976595e72508}"}, "title": "Enable gazebo-simbody and gazebo-dart jobs"}, "content": {"raw": "Ah right, they are already being run for all the physics engines. I was pointing to pr2, speed, etc. So, if I plan on running tests affecting dart, I will need to consider them along with UNIT_Joint_TEST, right?", "markup": "markdown", "html": "<p>Ah right, they are already being run for all the physics engines. I was pointing to pr2, speed, etc. So, if I plan on running tests affecting dart, I will need to consider them along with UNIT_Joint_TEST, right?</p>", "type": "rendered"}, "created_on": "2013-12-18T11:36:49.276448+00:00", "user": {"display_name": "Jose Luis Rivero", "uuid": "{d12309b2-f745-42ee-b119-aec4fcdf81fe}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D"}, "html": {"href": "https://bitbucket.org/%7Bd12309b2-f745-42ee-b119-aec4fcdf81fe%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/109284c8b83411dbc7492138f6167e9ed=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJR-5.png"}}, "nickname": "Jose Luis Rivero", "type": "user", "account_id": "557058:155a32e2-420c-4d50-98e0-0e722f63f906"}, "updated_on": null, "type": "issue_comment", "id": 7402783}, {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21/comments/7408988.json"}, "html": {"href": "#!/osrf/release-tools/issues/21#comment-7408988"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/release-tools/issues/21.json"}}, "type": "issue", "id": 21, "repository": {"links": {"self": {"href": "data/repositories/osrf/release-tools.json"}, "html": {"href": "#!/osrf/release-tools"}, "avatar": {"href": "data/bytebucket.org/ravatar/{41811d3d-19d0-428e-a134-976595e72508}ts=python"}}, "type": "repository", "name": "release-tools", "full_name": "osrf/release-tools", "uuid": "{41811d3d-19d0-428e-a134-976595e72508}"}, "title": "Enable gazebo-simbody and gazebo-dart jobs"}, "content": {"raw": "I would look for tests that include `helper_physics_generator.hh`:\n~~~\n$ grep -rlI 'include.*helper_physics_generator' . | sort\n./gazebo/physics/Joint_TEST.cc\n./test/integration/bandwidth.cc\n./test/integration/contact_sensor.cc\n./test/integration/factory.cc\n./test/integration/heightmap.cc\n./test/integration/imu.cc\n./test/integration/laser.cc\n./test/integration/nondefault_world.cc\n./test/integration/physics.cc\n./test/integration/physics_msgs.cc\n./test/integration/physics_thread_safe.cc\n./test/integration/pioneer2dx.cc\n./test/integration/pr2.cc\n./test/integration/server_fixture.cc\n./test/integration/speed.cc\n./test/integration/speed_pr2.cc\n./test/integration/surface_properties.cc\n~~~\nThere are still a few other tests involving multiple physics engines that aren't using that helper, but we should migrate these to use the helper in my opinion:\n~~~\n$ grep -rnI '(\"ode\")' . | grep -i test\n./gazebo/sensors/ImuSensor_TEST.cc:77:  BasicImuSensorCheck(\"ode\");\n./gazebo/sensors/ImuSensor_TEST.cc:155:  LinearAccelerationTest(\"ode\");\n./gazebo/physics/PhysicsEngine_TEST.cc:97:  PhysicsEngineParam(\"ode\");\n./gazebo/physics/ode/ODEGearboxJoint_TEST.cc:102:  GearboxTest(\"ode\");\n./gazebo/physics/ode/ODEGearboxJoint_TEST.cc:176:  SetGearRatio(\"ode\");\n./test/integration/physics.cc:1289:  DropStuff(\"ode\");\n./test/integration/surface_properties.cc:173:INSTANTIATE_TEST_CASE_P(TestODE, SurfaceTest, ::testing::Values(\"ode\"));\n./test/integration/transceiver.cc:406:    ::testing::Values(\"ode\"));\n./test/integration/stress_spawn_models.cc:67:    ::testing::Values(\"ode\"));\n~~~", "markup": "markdown", "html": "<p>I would look for tests that include <code>helper_physics_generator.hh</code>:</p>\n<div class=\"codehilite\"><pre><span></span>$ grep -rlI <span class=\"s1\">&#39;include.*helper_physics_generator&#39;</span> . <span class=\"p\">|</span> sort\n./gazebo/physics/Joint_TEST.cc\n./test/integration/bandwidth.cc\n./test/integration/contact_sensor.cc\n./test/integration/factory.cc\n./test/integration/heightmap.cc\n./test/integration/imu.cc\n./test/integration/laser.cc\n./test/integration/nondefault_world.cc\n./test/integration/physics.cc\n./test/integration/physics_msgs.cc\n./test/integration/physics_thread_safe.cc\n./test/integration/pioneer2dx.cc\n./test/integration/pr2.cc\n./test/integration/server_fixture.cc\n./test/integration/speed.cc\n./test/integration/speed_pr2.cc\n./test/integration/surface_properties.cc\n</pre></div>\n\n\n<p>There are still a few other tests involving multiple physics engines that aren't using that helper, but we should migrate these to use the helper in my opinion:</p>\n<div class=\"codehilite\"><pre><span></span>$ grep -rnI <span class=\"s1\">&#39;(&quot;ode&quot;)&#39;</span> . <span class=\"p\">|</span> grep -i <span class=\"nb\">test</span>\n./gazebo/sensors/ImuSensor_TEST.cc:77:  BasicImuSensorCheck<span class=\"o\">(</span><span class=\"s2\">&quot;ode&quot;</span><span class=\"o\">)</span><span class=\"p\">;</span>\n./gazebo/sensors/ImuSensor_TEST.cc:155:  LinearAccelerationTest<span class=\"o\">(</span><span class=\"s2\">&quot;ode&quot;</span><span class=\"o\">)</span><span class=\"p\">;</span>\n./gazebo/physics/PhysicsEngine_TEST.cc:97:  PhysicsEngineParam<span class=\"o\">(</span><span class=\"s2\">&quot;ode&quot;</span><span class=\"o\">)</span><span class=\"p\">;</span>\n./gazebo/physics/ode/ODEGearboxJoint_TEST.cc:102:  GearboxTest<span class=\"o\">(</span><span class=\"s2\">&quot;ode&quot;</span><span class=\"o\">)</span><span class=\"p\">;</span>\n./gazebo/physics/ode/ODEGearboxJoint_TEST.cc:176:  SetGearRatio<span class=\"o\">(</span><span class=\"s2\">&quot;ode&quot;</span><span class=\"o\">)</span><span class=\"p\">;</span>\n./test/integration/physics.cc:1289:  DropStuff<span class=\"o\">(</span><span class=\"s2\">&quot;ode&quot;</span><span class=\"o\">)</span><span class=\"p\">;</span>\n./test/integration/surface_properties.cc:173:INSTANTIATE_TEST_CASE_P<span class=\"o\">(</span>TestODE, SurfaceTest, ::testing::Values<span class=\"o\">(</span><span class=\"s2\">&quot;ode&quot;</span><span class=\"o\">))</span><span class=\"p\">;</span>\n./test/integration/transceiver.cc:406:    ::testing::Values<span class=\"o\">(</span><span class=\"s2\">&quot;ode&quot;</span><span class=\"o\">))</span><span class=\"p\">;</span>\n./test/integration/stress_spawn_models.cc:67:    ::testing::Values<span class=\"o\">(</span><span class=\"s2\">&quot;ode&quot;</span><span class=\"o\">))</span><span class=\"p\">;</span>\n</pre></div>", "type": "rendered"}, "created_on": "2013-12-18T18:30:52.992344+00:00", "user": {"display_name": "Steve Peters", "uuid": "{2ccfed09-18b8-4921-8d58-15ef01092802}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D"}, "html": {"href": "https://bitbucket.org/%7B2ccfed09-18b8-4921-8d58-15ef01092802%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1fb4816dad9e68337d3096f750951f6cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSP-1.png"}}, "nickname": "Steven Peters", "type": "user", "account_id": "557058:5de38267-b118-494c-aa76-4fab35448816"}, "updated_on": null, "type": "issue_comment", "id": 7408988}], "page": 1, "size": 9}